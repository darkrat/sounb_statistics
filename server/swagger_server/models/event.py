# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, theme: Theme=None, owner: User=None, event_form: EventForm=None, department: Department=None, event_type: EventType=None, title: str=None, exposition_title: str=None, has_poster: bool=False, has_photos: bool=False, start_date: datetime=None, end_date: datetime=None, description: str=None, author: str=None, location: str=None, visitor_count: int=None, child_visitor_count: int=None, junior_visitor_count: int=None, books_on_display_count: int=None, issued_books_count: int=None, news_link: str=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param id: The id of this Event.  # noqa: E501
        :type id: int
        :param theme: The theme of this Event.  # noqa: E501
        :type theme: Theme
        :param owner: The owner of this Event.  # noqa: E501
        :type owner: User
        :param event_form: The event_form of this Event.  # noqa: E501
        :type event_form: EventForm
        :param department: The department of this Event.  # noqa: E501
        :type department: Department
        :param event_type: The event_type of this Event.  # noqa: E501
        :type event_type: EventType
        :param title: The title of this Event.  # noqa: E501
        :type title: str
        :param exposition_title: The exposition_title of this Event.  # noqa: E501
        :type exposition_title: str
        :param has_poster: The has_poster of this Event.  # noqa: E501
        :type has_poster: bool
        :param has_photos: The has_photos of this Event.  # noqa: E501
        :type has_photos: bool
        :param start_date: The start_date of this Event.  # noqa: E501
        :type start_date: datetime
        :param end_date: The end_date of this Event.  # noqa: E501
        :type end_date: datetime
        :param description: The description of this Event.  # noqa: E501
        :type description: str
        :param author: The author of this Event.  # noqa: E501
        :type author: str
        :param location: The location of this Event.  # noqa: E501
        :type location: str
        :param visitor_count: The visitor_count of this Event.  # noqa: E501
        :type visitor_count: int
        :param child_visitor_count: The child_visitor_count of this Event.  # noqa: E501
        :type child_visitor_count: int
        :param junior_visitor_count: The junior_visitor_count of this Event.  # noqa: E501
        :type junior_visitor_count: int
        :param books_on_display_count: The books_on_display_count of this Event.  # noqa: E501
        :type books_on_display_count: int
        :param issued_books_count: The issued_books_count of this Event.  # noqa: E501
        :type issued_books_count: int
        :param news_link: The news_link of this Event.  # noqa: E501
        :type news_link: str
        """
        self.swagger_types = {
            'id': int,
            'theme': Theme,
            'owner': User,
            'event_form': EventForm,
            'department': Department,
            'event_type': EventType,
            'title': str,
            'exposition_title': str,
            'has_poster': bool,
            'has_photos': bool,
            'start_date': datetime,
            'end_date': datetime,
            'description': str,
            'author': str,
            'location': str,
            'visitor_count': int,
            'child_visitor_count': int,
            'junior_visitor_count': int,
            'books_on_display_count': int,
            'issued_books_count': int,
            'news_link': str
        }

        self.attribute_map = {
            'id': 'id',
            'theme': 'theme',
            'owner': 'owner',
            'event_form': 'eventForm',
            'department': 'department',
            'event_type': 'eventType',
            'title': 'title',
            'exposition_title': 'expositionTitle',
            'has_poster': 'hasPoster',
            'has_photos': 'hasPhotos',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'description': 'description',
            'author': 'author',
            'location': 'location',
            'visitor_count': 'visitorCount',
            'child_visitor_count': 'childVisitorCount',
            'junior_visitor_count': 'juniorVisitorCount',
            'books_on_display_count': 'booksOnDisplayCount',
            'issued_books_count': 'issuedBooksCount',
            'news_link': 'newsLink'
        }

        self._id = id
        self._theme = theme
        self._owner = owner
        self._event_form = event_form
        self._department = department
        self._event_type = event_type
        self._title = title
        self._exposition_title = exposition_title
        self._has_poster = has_poster
        self._has_photos = has_photos
        self._start_date = start_date
        self._end_date = end_date
        self._description = description
        self._author = author
        self._location = location
        self._visitor_count = visitor_count
        self._child_visitor_count = child_visitor_count
        self._junior_visitor_count = junior_visitor_count
        self._books_on_display_count = books_on_display_count
        self._issued_books_count = issued_books_count
        self._news_link = news_link

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def theme(self) -> Theme:
        """Gets the theme of this Event.


        :return: The theme of this Event.
        :rtype: Theme
        """
        return self._theme

    @theme.setter
    def theme(self, theme: Theme):
        """Sets the theme of this Event.


        :param theme: The theme of this Event.
        :type theme: Theme
        """

        self._theme = theme

    @property
    def owner(self) -> User:
        """Gets the owner of this Event.


        :return: The owner of this Event.
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner: User):
        """Sets the owner of this Event.


        :param owner: The owner of this Event.
        :type owner: User
        """

        self._owner = owner

    @property
    def event_form(self) -> EventForm:
        """Gets the event_form of this Event.


        :return: The event_form of this Event.
        :rtype: EventForm
        """
        return self._event_form

    @event_form.setter
    def event_form(self, event_form: EventForm):
        """Sets the event_form of this Event.


        :param event_form: The event_form of this Event.
        :type event_form: EventForm
        """

        self._event_form = event_form

    @property
    def department(self) -> Department:
        """Gets the department of this Event.


        :return: The department of this Event.
        :rtype: Department
        """
        return self._department

    @department.setter
    def department(self, department: Department):
        """Sets the department of this Event.


        :param department: The department of this Event.
        :type department: Department
        """

        self._department = department

    @property
    def event_type(self) -> EventType:
        """Gets the event_type of this Event.


        :return: The event_type of this Event.
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: EventType):
        """Sets the event_type of this Event.


        :param event_type: The event_type of this Event.
        :type event_type: EventType
        """

        self._event_type = event_type

    @property
    def title(self) -> str:
        """Gets the title of this Event.


        :return: The title of this Event.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Event.


        :param title: The title of this Event.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def exposition_title(self) -> str:
        """Gets the exposition_title of this Event.


        :return: The exposition_title of this Event.
        :rtype: str
        """
        return self._exposition_title

    @exposition_title.setter
    def exposition_title(self, exposition_title: str):
        """Sets the exposition_title of this Event.


        :param exposition_title: The exposition_title of this Event.
        :type exposition_title: str
        """

        self._exposition_title = exposition_title

    @property
    def has_poster(self) -> bool:
        """Gets the has_poster of this Event.


        :return: The has_poster of this Event.
        :rtype: bool
        """
        return self._has_poster

    @has_poster.setter
    def has_poster(self, has_poster: bool):
        """Sets the has_poster of this Event.


        :param has_poster: The has_poster of this Event.
        :type has_poster: bool
        """

        self._has_poster = has_poster

    @property
    def has_photos(self) -> bool:
        """Gets the has_photos of this Event.


        :return: The has_photos of this Event.
        :rtype: bool
        """
        return self._has_photos

    @has_photos.setter
    def has_photos(self, has_photos: bool):
        """Sets the has_photos of this Event.


        :param has_photos: The has_photos of this Event.
        :type has_photos: bool
        """

        self._has_photos = has_photos

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Event.


        :return: The start_date of this Event.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Event.


        :param start_date: The start_date of this Event.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this Event.


        :return: The end_date of this Event.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this Event.


        :param end_date: The end_date of this Event.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def description(self) -> str:
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def author(self) -> str:
        """Gets the author of this Event.


        :return: The author of this Event.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Event.


        :param author: The author of this Event.
        :type author: str
        """

        self._author = author

    @property
    def location(self) -> str:
        """Gets the location of this Event.


        :return: The location of this Event.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Event.


        :param location: The location of this Event.
        :type location: str
        """

        self._location = location

    @property
    def visitor_count(self) -> int:
        """Gets the visitor_count of this Event.


        :return: The visitor_count of this Event.
        :rtype: int
        """
        return self._visitor_count

    @visitor_count.setter
    def visitor_count(self, visitor_count: int):
        """Sets the visitor_count of this Event.


        :param visitor_count: The visitor_count of this Event.
        :type visitor_count: int
        """

        self._visitor_count = visitor_count

    @property
    def child_visitor_count(self) -> int:
        """Gets the child_visitor_count of this Event.


        :return: The child_visitor_count of this Event.
        :rtype: int
        """
        return self._child_visitor_count

    @child_visitor_count.setter
    def child_visitor_count(self, child_visitor_count: int):
        """Sets the child_visitor_count of this Event.


        :param child_visitor_count: The child_visitor_count of this Event.
        :type child_visitor_count: int
        """

        self._child_visitor_count = child_visitor_count

    @property
    def junior_visitor_count(self) -> int:
        """Gets the junior_visitor_count of this Event.


        :return: The junior_visitor_count of this Event.
        :rtype: int
        """
        return self._junior_visitor_count

    @junior_visitor_count.setter
    def junior_visitor_count(self, junior_visitor_count: int):
        """Sets the junior_visitor_count of this Event.


        :param junior_visitor_count: The junior_visitor_count of this Event.
        :type junior_visitor_count: int
        """

        self._junior_visitor_count = junior_visitor_count

    @property
    def books_on_display_count(self) -> int:
        """Gets the books_on_display_count of this Event.


        :return: The books_on_display_count of this Event.
        :rtype: int
        """
        return self._books_on_display_count

    @books_on_display_count.setter
    def books_on_display_count(self, books_on_display_count: int):
        """Sets the books_on_display_count of this Event.


        :param books_on_display_count: The books_on_display_count of this Event.
        :type books_on_display_count: int
        """

        self._books_on_display_count = books_on_display_count

    @property
    def issued_books_count(self) -> int:
        """Gets the issued_books_count of this Event.

        Количество вданных книг  # noqa: E501

        :return: The issued_books_count of this Event.
        :rtype: int
        """
        return self._issued_books_count

    @issued_books_count.setter
    def issued_books_count(self, issued_books_count: int):
        """Sets the issued_books_count of this Event.

        Количество вданных книг  # noqa: E501

        :param issued_books_count: The issued_books_count of this Event.
        :type issued_books_count: int
        """

        self._issued_books_count = issued_books_count

    @property
    def news_link(self) -> str:
        """Gets the news_link of this Event.


        :return: The news_link of this Event.
        :rtype: str
        """
        return self._news_link

    @news_link.setter
    def news_link(self, news_link: str):
        """Sets the news_link of this Event.


        :param news_link: The news_link of this Event.
        :type news_link: str
        """

        self._news_link = news_link
